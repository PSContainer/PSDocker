FROM nvidia/cuda:11.3.1-devel-ubuntu20.04

# Set environment variables
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV DEBIAN_FRONTEND=noninteractive
ENV PATH /opt/conda/bin:$PATH

# Consolidate and optimize apt-get installs
# Update and install essential packages in small groups to identify potential conflicts
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        ca-certificates \
        wget \
        apt-transport-https \
        software-properties-common \
        procps \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 1 - Base utilities
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        bzip2 \
        git \
        mercurial \
        subversion \
        openssh-client \
        nano \
        vim \
        zip \
        unzip \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 2 - Graphics libraries (these are more likely to conflict with GPU drivers)
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        libglib2.0-0 \
        libsm6 \
        libxext6 \
        libxrender1 \
        libglu1-mesa-dev \
        freeglut3-dev \
        mesa-common-dev \
        xvfb \
        libx11-6 \
        libgl1-mesa-glx \
        libegl1-mesa \
        libxrandr2 \
        libxss1 \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 3 - Build tools and compilers
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        g++ \
        gcc \
        build-essential \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 4 - Multimedia libraries
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        ffmpeg \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

    # Install NVIDIA-specific utilities (if not already included in base image)


##################################
### Anaconda
#CMD [ "/bin/bash" ]

# Leave these args here to better use the Docker build cache
ARG CONDA_VERSION=py311_24.1.2-0

RUN set -x && \
    UNAME_M="$(uname -m)" && \
    if [ "${UNAME_M}" = "x86_64" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"; \
    elif [ "${UNAME_M}" = "s390x" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-s390x.sh"; \
    elif [ "${UNAME_M}" = "aarch64" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh"; \
    fi && \
    wget "${MINIFORGE_URL}" -O miniforge.sh -q && \
    mkdir -p /opt && \
    bash miniforge.sh -b -p /opt/conda && \
    rm miniforge.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc && \
    find /opt/conda/ -follow -type f -name '*.a' -delete && \
    find /opt/conda/ -follow -type f -name '*.js.map' -delete && \
    /opt/conda/bin/conda clean -afy




RUN  apt-get update -q && \
  apt-get install python3-venv -q -y  && \
   apt-get clean && rm -rf /var/lib/apt/lists/*

# Set the command

RUN eval "$(conda shell.bash hook)"
RUN echo "conda init bash" >> ~/.bashrc
# # Set shell to bash
# SHELL ["/bin/bash", "-c"]

# ... (previous Dockerfile contents)

# Copy the setup script into the container
COPY setup_environment.sh /setup_environment.sh

# Make the script executable
RUN chmod +x /setup_environment.sh

# Run the setup script
RUN /setup_environment.sh

# Set the environment variable for the PATH
ENV PATH="/opt/deca-env/bin:$PATH"

# Set the default command to activate the virtual environment
CMD ["bash", "-c", "source /opt/deca-env/bin/activate && /bin/bash"]
