FROM nvidia/cuda:11.6.1-cudnn8-devel-ubuntu20.04
# works on the cluster for flare

LABEL maintainer="Anaconda, Inc"

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
# Set the environment variables
ENV TCNN_CUDA_ARCHITECTURES="70;75;80"
ENV NVCC_PREPEND_FLAGS='-ccbin /usr/bin/gcc-9'

# Set non-interactive frontend
ENV DEBIAN_FRONTEND=noninteractive

# Enable multi-arch support for i386 packages
RUN dpkg --add-architecture i386

# Install basic dependencies
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        software-properties-common \
        apt-transport-https \
        bzip2 \
        ca-certificates \
        git \
        libglib2.0-0 \
        libsm6 \
        libxext6 \
        libxrender1 \
        mercurial \
        openssh-client \
        procps \
        subversion \
        wget \
        g++ \
        gcc \
        zip \
        unzip \
        tzdata \
        linux-headers-generic \
        dkms \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

 # Morning 0726: Stitch Install OpenGL libraries
RUN apt-get update && apt-get install -y \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libglvnd0 \
    libgl1 \
    libglx0 \
    libegl1 \
    libgles2 \
    libglvnd-dev \
    cmake \
    curl \
    libgl1-mesa-dev \
    libegl1-mesa-dev \
    libgles2-mesa-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

    # CudSolver Sitch 
RUN apt-get update && apt-get install -y --no-install-recommends \
    pkg-config \
    nvidia-cuda-dev \
    ninja-build \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
    
# Add NVIDIA driver PPA
RUN add-apt-repository ppa:graphics-drivers/ppa && \
    apt-get update

# Install NVIDIA drivers and libcusolver

RUN apt-get install -y --no-install-recommends \
        nvidia-driver-535 \
     libnvidia-gl-535 \
      nvidia-utils-535 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV PATH /opt/conda/bin:$PATH

# Set environment variables for OpenGL
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility,graphics

##################################
### Anaconda

RUN set -x && \
    UNAME_M="$(uname -m)" && \
    if [ "${UNAME_M}" = "x86_64" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"; \
    elif [ "${UNAME_M}" = "s390x" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-s390x.sh"; \
    elif [ "${UNAME_M}" = "aarch64" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh"; \
    fi && \
    wget "${MINIFORGE_URL}" -O miniforge.sh -q && \
    mkdir -p /opt && \
    bash miniforge.sh -b -p /opt/conda && \
    rm miniforge.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc && \
    find /opt/conda/ -follow -type f -name '*.a' -delete && \
    find /opt/conda/ -follow -type f -name '*.js.map' -delete && \
    /opt/conda/bin/conda clean -afy
##################################

# Set timezone
RUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata
# 
# Set non-interactive frontend
ENV DEBIAN_FRONTEND=noninteractive

# Update package lists and install nano
RUN apt-get update && apt-get install -y nano && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*


# Create and activate flare environment
RUN conda create -n flare python=3.9 && \
    echo "conda activate flare" >> ~/.bashrc

SHELL ["conda", "run", "-n", "flare", "/bin/bash", "-c"]

# Install PyTorch
RUN pip install torch==1.13.1+cu116 torchvision==0.14.1+cu116 torchaudio==0.13.1 --extra-index-url https://download.pytorch.org/whl/cu116

# Install other conda packages
RUN conda install -c fvcore -c iopath -c conda-forge fvcore iopath && \
    conda install -c bottler nvidiacub && \
    conda install https://anaconda.org/pytorch3d/pytorch3d/0.7.5/download/linux-64/pytorch3d-0.7.5-py39_cu116_pyt1131.tar.bz2

# Install pip packages
RUN pip install ninja imageio PyOpenGL glfw xatlas gdown PyOpenGL_accelerate && \
    pip install git+https://github.com/NVlabs/nvdiffrast/

# Set environment variables
ENV TCNN_CUDA_ARCHITECTURES="70;75;80"
ENV NVCC_PREPEND_FLAGS='-ccbin /usr/bin/gcc-9'
ENV CUDA_HOME=/usr/local/cuda-11.6
ENV PATH=$CUDA_HOME/bin:$PATH
ENV LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH

# Install tiny-cuda-nn
RUN pip install --global-option="--no-networks" git+https://github.com/NVlabs/tiny-cuda-nn#subdirectory=bindings/torch

# Install additional packages
RUN pip install imageio==2.19.5 scikit-image==0.20.0 numpy==1.23.1 matplotlib==3.6.1 && \
    pip install gpytoolbox opencv-python trimesh==3.21.7 chumpy lpips tqdm configargparse open3d shapely && \
    pip install git+https://github.com/jonbarron/robust_loss_pytorch

# Download freeimage
RUN python -c "import imageio; imageio.plugins.freeimage.download()"

# Set the default command to bash
CMD ["/bin/bash"]
