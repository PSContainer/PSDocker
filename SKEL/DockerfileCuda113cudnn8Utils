FROM nvidia/cuda:11.3.1-cudnn8-devel-ubuntu20.04


# Set environment variables
ENV LANG C.UTF-8 LC_ALL C.UTF-8
ENV DEBIAN_FRONTEND noninteractive
ENV PATH /opt/conda/bin:$PATH


# Update your Dockerfile to include these lines before the apt-get update
RUN rm -f /etc/apt/apt.conf.d/docker-clean \
    && apt-get update -q \
    && apt-get install -y --no-install-recommends gnupg2 curl \
    && curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub | apt-key add - \
    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 871920D1991BC93C \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Consolidate and optimize apt-get installs
# Update and install essential packages in small groups to identify potential conflicts
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        ca-certificates \
        wget \
        apt-transport-https \
        software-properties-common \
        procps \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 1 - Base utilities
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        bzip2 \
        git \
        mercurial \
        subversion \
        openssh-client \
        nano \
        vim \
        zip \
        unzip \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 2 - Graphics libraries (these are more likely to conflict with GPU drivers)
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        libglib2.0-0 \
        libsm6 \
        libxext6 \
        libxrender1 \
        libglu1-mesa-dev \
        freeglut3-dev \
        mesa-common-dev \
        xvfb \
        libx11-6 \
        libgl1-mesa-glx \
        libegl1-mesa \
        libxrandr2 \
        libxss1 \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 3 - Build tools and compilers
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        g++-7 \
        gcc-7 \
        build-essential \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 4 - Multimedia libraries
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        ffmpeg \
    && apt-get clean && rm -rf /var/lib/apt/lists/*


##################################
### Anaconda
CMD [ "/bin/bash" ]

RUN set -x && \
    UNAME_M="$(uname -m)" && \
    if [ "${UNAME_M}" = "x86_64" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"; \
    elif [ "${UNAME_M}" = "s390x" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-s390x.sh"; \
    elif [ "${UNAME_M}" = "aarch64" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh"; \
    fi && \
    wget "${MINIFORGE_URL}" -O miniforge.sh -q && \
    mkdir -p /opt && \
    bash miniforge.sh -b -p /opt/conda && \
    rm miniforge.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc && \
    find /opt/conda/ -follow -type f -name '*.a' -delete && \
    find /opt/conda/ -follow -type f -name '*.js.map' -delete && \
    /opt/conda/bin/conda clean -afy
##################################

# Install NVIDIA-specific utilities (if not already included in base image)
RUN apt-get update && apt-get install -y --no-install-recommends \
    nvidia-utils-515 && \
    rm -rf /var/lib/apt/lists/*


# Avoid timezone interactive prompt
ENV DEBIAN_FRONTEND=noninteractive

# Install Python and system dependencies
RUN apt-get update -q && \
    apt-get install -q -y python3.8 python3.8-venv python3-pip git \
    libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev \
    make cmake build-essential wget && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python3.8 -m venv /opt/skel_venv

# Copy setup script
COPY setup.sh /setup.sh
RUN chmod +x /setup.sh

# Run setup script
RUN /setup.sh

# Set working directory
WORKDIR /app

# Set the environment variable for the PATH
ENV PATH="/opt/skel_venv/bin:$PATH"

# Set the default command to activate the virtual environment
CMD ["bash", "-c", "source /opt/skel_venv/bin/activate && /bin/bash"]
