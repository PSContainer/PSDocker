FROM nvidia/cuda:11.3.1-devel-ubuntu20.04


# Set environment variables
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV DEBIAN_FRONTEND=noninteractive
ENV PATH=/opt/conda/bin:$PATH

# Consolidate and optimize apt-get installs
# Update and install essential packages in small groups to identify potential conflicts
# Consolidate and optimize apt-get installs

# Consolidate and optimize apt-get installs
# Update and install essential packages in small groups to identify potential conflicts
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        ca-certificates \
        wget \
        apt-transport-https \
        software-properties-common \
        procps \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 1 - Base utilities
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        bzip2 \
        git \
        mercurial \
        subversion \
        openssh-client \
        nano \
        vim \
        zip \
        unzip \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 2 - Graphics libraries (these are more likely to conflict with GPU drivers)
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        libglib2.0-0 \
        libsm6 \
        libxext6 \
        libxrender1 \
        libglu1-mesa-dev \
        freeglut3-dev \
        mesa-common-dev \
        xvfb \ 
        libx11-6 \
        libgl1-mesa-glx \
        libegl1-mesa \
        libxrandr2 \
        libxss1 \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 3 - Build tools and compilers
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        g++ \
        gcc \
        build-essential \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 4 - Multimedia libraries
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        ffmpeg \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

##################################
### Anaconda
CMD [ "/bin/bash" ]

RUN set -x && \
    UNAME_M="$(uname -m)" && \
    if [ "${UNAME_M}" = "x86_64" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"; \
    elif [ "${UNAME_M}" = "s390x" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-s390x.sh"; \
    elif [ "${UNAME_M}" = "aarch64" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh"; \
    fi && \
    wget "${MINIFORGE_URL}" -O miniforge.sh -q && \
    mkdir -p /opt && \
    bash miniforge.sh -b -p /opt/conda && \
    rm miniforge.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc && \
    find /opt/conda/ -follow -type f -name '*.a' -delete && \
    find /opt/conda/ -follow -type f -name '*.js.map' -delete && \
    /opt/conda/bin/conda clean -afy
##################################

# Install NVIDIA-specific utilities (if not already included in base image)
RUN apt-get update && apt-get install -y --no-install-recommends \
    nvidia-utils-515 && \
    rm -rf /var/lib/apt/lists/*

    # Set up conda environment
RUN conda update -n base -c defaults conda

# Create a new conda environment
RUN conda create -n py27 python=2.7

# Initialize conda in bash
RUN echo "conda init bash" >> ~/.bashrc

# Activate conda environment and install packages
RUN echo ". /opt/conda/etc/profile.d/conda.sh && \
    conda activate py27 && \
    python -m ensurepip --default-pip && \
    pip install numpy==1.16.6 scipy==1.2.3 && \
    pip install tqdm chumpy==0.69" >> ~/.bashrc

# Set the default command to run when starting the container
CMD ["/bin/bash", "-l"]


# Set shell to bash
SHELL ["/bin/bash", "-c"]

# Update conda and create a new conda environment named 'teach' with Python 3.9
RUN conda update -n base -c defaults conda && \
    conda create -n teach python=3.9 -y

# Activate the conda environment
RUN echo "conda activate teach" >> ~/.bashrc

# Create a pip virtual environment in /opt/
RUN mkdir -p /opt/teach-env && \
    /opt/conda/envs/teach/bin/python -m venv /opt/teach-env

# Set environment variables
ENV PATH="/opt/teach-env/bin:$PATH"

# Activate the pip virtual environment and install packages
RUN source /opt/teach-env/bin/activate && \
    pip install --upgrade pip==23.0.1 && \
    pip install numpy==1.23.1 cython && \
    pip install torch==1.11.0 torchvision==0.12.0 torchaudio==0.11.0 && \
    pip install transformers==4.44.2 huggingface-hub==0.23.3 safetensors==0.4.1 regex==2020.6.8 tokenizers==0.19.1 && \
    pip install pytorch-lightning==1.5.0 lightning-utilities==0.11.7 packaging==24.1 fsspec==2024.9.0 torchmetrics==1.4.1 tqdm==4.66.5 --no-deps && \
    pip install PyYAML==6.0.2

# Set the default command to activate the virtual environment
CMD ["bash", "-c", "source /opt/teach-env/bin/activate && /bin/bash"]