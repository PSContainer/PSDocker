FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04





##########################################################
#
# Part 0: Install the OpenGL materials
# from: https://github.com/atinfinity/cudagl/blob/main/Dockerfile



ENV NVIDIA_VISIBLE_DEVICES ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics

ARG UID=1000
ARG GID=1000

# add new sudo user
ENV USERNAME cudagl
ENV HOME /home/$USERNAME
RUN useradd -m $USERNAME && \
        echo "$USERNAME:$USERNAME" | chpasswd && \
        usermod --shell /bin/bash $USERNAME && \
        usermod -aG sudo $USERNAME && \
        mkdir /etc/sudoers.d && \
        echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/$USERNAME && \
        chmod 0440 /etc/sudoers.d/$USERNAME && \
        usermod  --uid $UID $USERNAME && \
        groupmod --gid $GID $USERNAME

# install package
RUN echo "Acquire::GzipIndexes \"false\"; Acquire::CompressionTypes::Order:: \"gz\";" > /etc/apt/apt.conf.d/docker-gzip-indexes
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends \
        sudo \
        less \
        emacs \
        tmux \
        bash-completion \
        command-not-found \
        software-properties-common \
        curl \
        wget \
        coreutils \
        build-essential \
        pkg-config \
        git \
        xdg-user-dirs \
        libgl1-mesa-dev \
        freeglut3-dev \
        mesa-utils \
        vulkan-tools \
        libvulkan-dev \
        libglfw3-dev \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

COPY config/nvidia_icd.json /usr/share/vulkan/icd.d/

ARG XDG_RUNTIME_DIR="/tmp/xdg_runtime_dir"
RUN mkdir -p ${XDG_RUNTIME_DIR} && chmod 777 ${XDG_RUNTIME_DIR}

USER $USERNAME
WORKDIR /home/$USERNAME
SHELL ["/bin/bash", "-l", "-c"]
RUN echo "export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json" >> ~/.bashrc
RUN echo "export XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR}" >> ~/.bashrc



##########################################################

# Set environment variables
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV DEBIAN_FRONTEND=noninteractive
ENV PATH /opt/conda/bin:$PATH

# Consolidate and optimize apt-get installs
# Update and install essential packages in small groups to identify potential conflicts
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        ca-certificates \
        wget \
        apt-transport-https \
        software-properties-common \
        procps \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 1 - Base utilities
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        bzip2 \
        git \
        mercurial \
        subversion \
        openssh-client \
        nano \
        vim \
        zip \
        unzip \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 2 - Graphics libraries (these are more likely to conflict with GPU drivers)
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        libglib2.0-0 \
        libsm6 \
        libxext6 \
        libxrender1 \
        libglu1-mesa-dev \
        freeglut3-dev \
        mesa-common-dev \
        xvfb \
        libx11-6 \
        libgl1-mesa-glx \
        libegl1-mesa \
        libxrandr2 \
        libxss1 \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 3 - Build tools and compilers
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        g++ \
        gcc \
        build-essential \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Group 4 - Multimedia libraries
RUN apt-get update -q && \
    apt-get install -q -y --no-install-recommends \
        ffmpeg \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

##################################
### Anaconda
CMD [ "/bin/bash" ]

RUN set -x && \
    UNAME_M="$(uname -m)" && \
    if [ "${UNAME_M}" = "x86_64" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh"; \
    elif [ "${UNAME_M}" = "s390x" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-s390x.sh"; \
    elif [ "${UNAME_M}" = "aarch64" ]; then \
        MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh"; \
    fi && \
    wget "${MINIFORGE_URL}" -O miniforge.sh -q && \
    mkdir -p /opt && \
    bash miniforge.sh -b -p /opt/conda && \
    rm miniforge.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc && \
    find /opt/conda/ -follow -type f -name '*.a' -delete && \
    find /opt/conda/ -follow -type f -name '*.js.map' -delete && \
    /opt/conda/bin/conda clean -afy
##################################

# Step 1: Install NVIDIA-specific utilities (if not already included in base image)
RUN apt-get update && apt-get install -y --no-install-recommends \
    nvidia-utils-470 && \
    # libnvidia-gl-470 && \
    rm -rf /var/lib/apt/lists/*

#################################

# Install required OpenGL, EGL, and development libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgl1-mesa-glx \
    libegl1-mesa \
    libxrandr2 \
    libxss1 \
    libxcursor1 \
    libxcomposite1 \
    libasound2 \
    libxi6 \
    libxtst6 \
    libglvnd0 \
    libgl1 \
    libglx0 \
    libegl1 \
    libgles2 \
    libxcb1 \
    libxau6 \
    libxdmcp6 \
    libxext6 \
    libx11-6 \
    pkg-config \
    libglvnd-dev \
    libgl1-mesa-dev \
    libegl1-mesa-dev \
    libgles2-mesa-dev \
    && rm -rf /var/lib/apt/lists/*

# Env vars for the nvidia-container-runtime.
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute